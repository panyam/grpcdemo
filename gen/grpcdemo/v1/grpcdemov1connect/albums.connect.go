// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: grpcdemo/v1/albums.proto

package grpcdemov1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-tour/gen/grpcdemo/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AlbumServiceName is the fully-qualified name of the AlbumService service.
	AlbumServiceName = "grpcdemo.v1.AlbumService"
)

// AlbumServiceClient is a client for the grpcdemo.v1.AlbumService service.
type AlbumServiceClient interface {
	// Create a new Album
	CreateAlbum(context.Context, *connect_go.Request[v1.CreateAlbumRequest]) (*connect_go.Response[v1.CreateAlbumResponse], error)
	// Batch gets multiple albums.
	GetAlbums(context.Context, *connect_go.Request[v1.GetAlbumsRequest]) (*connect_go.Response[v1.GetAlbumsResponse], error)
	// Updates specific fields of an Album
	UpdateAlbum(context.Context, *connect_go.Request[v1.UpdateAlbumRequest]) (*connect_go.Response[v1.UpdateAlbumResponse], error)
	// Deletes an album from our system.
	DeleteAlbum(context.Context, *connect_go.Request[v1.DeleteAlbumRequest]) (*connect_go.Response[v1.DeleteAlbumResponse], error)
	// Finds and retrieves albums matching the particular criteria.
	ListAlbums(context.Context, *connect_go.Request[v1.ListAlbumsRequest]) (*connect_go.Response[v1.ListAlbumsResponse], error)
}

// NewAlbumServiceClient constructs a client for the grpcdemo.v1.AlbumService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAlbumServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AlbumServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &albumServiceClient{
		createAlbum: connect_go.NewClient[v1.CreateAlbumRequest, v1.CreateAlbumResponse](
			httpClient,
			baseURL+"/grpcdemo.v1.AlbumService/CreateAlbum",
			opts...,
		),
		getAlbums: connect_go.NewClient[v1.GetAlbumsRequest, v1.GetAlbumsResponse](
			httpClient,
			baseURL+"/grpcdemo.v1.AlbumService/GetAlbums",
			opts...,
		),
		updateAlbum: connect_go.NewClient[v1.UpdateAlbumRequest, v1.UpdateAlbumResponse](
			httpClient,
			baseURL+"/grpcdemo.v1.AlbumService/UpdateAlbum",
			opts...,
		),
		deleteAlbum: connect_go.NewClient[v1.DeleteAlbumRequest, v1.DeleteAlbumResponse](
			httpClient,
			baseURL+"/grpcdemo.v1.AlbumService/DeleteAlbum",
			opts...,
		),
		listAlbums: connect_go.NewClient[v1.ListAlbumsRequest, v1.ListAlbumsResponse](
			httpClient,
			baseURL+"/grpcdemo.v1.AlbumService/ListAlbums",
			opts...,
		),
	}
}

// albumServiceClient implements AlbumServiceClient.
type albumServiceClient struct {
	createAlbum *connect_go.Client[v1.CreateAlbumRequest, v1.CreateAlbumResponse]
	getAlbums   *connect_go.Client[v1.GetAlbumsRequest, v1.GetAlbumsResponse]
	updateAlbum *connect_go.Client[v1.UpdateAlbumRequest, v1.UpdateAlbumResponse]
	deleteAlbum *connect_go.Client[v1.DeleteAlbumRequest, v1.DeleteAlbumResponse]
	listAlbums  *connect_go.Client[v1.ListAlbumsRequest, v1.ListAlbumsResponse]
}

// CreateAlbum calls grpcdemo.v1.AlbumService.CreateAlbum.
func (c *albumServiceClient) CreateAlbum(ctx context.Context, req *connect_go.Request[v1.CreateAlbumRequest]) (*connect_go.Response[v1.CreateAlbumResponse], error) {
	return c.createAlbum.CallUnary(ctx, req)
}

// GetAlbums calls grpcdemo.v1.AlbumService.GetAlbums.
func (c *albumServiceClient) GetAlbums(ctx context.Context, req *connect_go.Request[v1.GetAlbumsRequest]) (*connect_go.Response[v1.GetAlbumsResponse], error) {
	return c.getAlbums.CallUnary(ctx, req)
}

// UpdateAlbum calls grpcdemo.v1.AlbumService.UpdateAlbum.
func (c *albumServiceClient) UpdateAlbum(ctx context.Context, req *connect_go.Request[v1.UpdateAlbumRequest]) (*connect_go.Response[v1.UpdateAlbumResponse], error) {
	return c.updateAlbum.CallUnary(ctx, req)
}

// DeleteAlbum calls grpcdemo.v1.AlbumService.DeleteAlbum.
func (c *albumServiceClient) DeleteAlbum(ctx context.Context, req *connect_go.Request[v1.DeleteAlbumRequest]) (*connect_go.Response[v1.DeleteAlbumResponse], error) {
	return c.deleteAlbum.CallUnary(ctx, req)
}

// ListAlbums calls grpcdemo.v1.AlbumService.ListAlbums.
func (c *albumServiceClient) ListAlbums(ctx context.Context, req *connect_go.Request[v1.ListAlbumsRequest]) (*connect_go.Response[v1.ListAlbumsResponse], error) {
	return c.listAlbums.CallUnary(ctx, req)
}

// AlbumServiceHandler is an implementation of the grpcdemo.v1.AlbumService service.
type AlbumServiceHandler interface {
	// Create a new Album
	CreateAlbum(context.Context, *connect_go.Request[v1.CreateAlbumRequest]) (*connect_go.Response[v1.CreateAlbumResponse], error)
	// Batch gets multiple albums.
	GetAlbums(context.Context, *connect_go.Request[v1.GetAlbumsRequest]) (*connect_go.Response[v1.GetAlbumsResponse], error)
	// Updates specific fields of an Album
	UpdateAlbum(context.Context, *connect_go.Request[v1.UpdateAlbumRequest]) (*connect_go.Response[v1.UpdateAlbumResponse], error)
	// Deletes an album from our system.
	DeleteAlbum(context.Context, *connect_go.Request[v1.DeleteAlbumRequest]) (*connect_go.Response[v1.DeleteAlbumResponse], error)
	// Finds and retrieves albums matching the particular criteria.
	ListAlbums(context.Context, *connect_go.Request[v1.ListAlbumsRequest]) (*connect_go.Response[v1.ListAlbumsResponse], error)
}

// NewAlbumServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAlbumServiceHandler(svc AlbumServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/grpcdemo.v1.AlbumService/CreateAlbum", connect_go.NewUnaryHandler(
		"/grpcdemo.v1.AlbumService/CreateAlbum",
		svc.CreateAlbum,
		opts...,
	))
	mux.Handle("/grpcdemo.v1.AlbumService/GetAlbums", connect_go.NewUnaryHandler(
		"/grpcdemo.v1.AlbumService/GetAlbums",
		svc.GetAlbums,
		opts...,
	))
	mux.Handle("/grpcdemo.v1.AlbumService/UpdateAlbum", connect_go.NewUnaryHandler(
		"/grpcdemo.v1.AlbumService/UpdateAlbum",
		svc.UpdateAlbum,
		opts...,
	))
	mux.Handle("/grpcdemo.v1.AlbumService/DeleteAlbum", connect_go.NewUnaryHandler(
		"/grpcdemo.v1.AlbumService/DeleteAlbum",
		svc.DeleteAlbum,
		opts...,
	))
	mux.Handle("/grpcdemo.v1.AlbumService/ListAlbums", connect_go.NewUnaryHandler(
		"/grpcdemo.v1.AlbumService/ListAlbums",
		svc.ListAlbums,
		opts...,
	))
	return "/grpcdemo.v1.AlbumService/", mux
}

// UnimplementedAlbumServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAlbumServiceHandler struct{}

func (UnimplementedAlbumServiceHandler) CreateAlbum(context.Context, *connect_go.Request[v1.CreateAlbumRequest]) (*connect_go.Response[v1.CreateAlbumResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpcdemo.v1.AlbumService.CreateAlbum is not implemented"))
}

func (UnimplementedAlbumServiceHandler) GetAlbums(context.Context, *connect_go.Request[v1.GetAlbumsRequest]) (*connect_go.Response[v1.GetAlbumsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpcdemo.v1.AlbumService.GetAlbums is not implemented"))
}

func (UnimplementedAlbumServiceHandler) UpdateAlbum(context.Context, *connect_go.Request[v1.UpdateAlbumRequest]) (*connect_go.Response[v1.UpdateAlbumResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpcdemo.v1.AlbumService.UpdateAlbum is not implemented"))
}

func (UnimplementedAlbumServiceHandler) DeleteAlbum(context.Context, *connect_go.Request[v1.DeleteAlbumRequest]) (*connect_go.Response[v1.DeleteAlbumResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpcdemo.v1.AlbumService.DeleteAlbum is not implemented"))
}

func (UnimplementedAlbumServiceHandler) ListAlbums(context.Context, *connect_go.Request[v1.ListAlbumsRequest]) (*connect_go.Response[v1.ListAlbumsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpcdemo.v1.AlbumService.ListAlbums is not implemented"))
}
