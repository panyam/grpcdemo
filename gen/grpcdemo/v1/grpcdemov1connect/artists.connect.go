// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: grpcdemo/v1/artists.proto

package grpcdemov1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-tour/gen/grpcdemo/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ArtistServiceName is the fully-qualified name of the ArtistService service.
	ArtistServiceName = "grpcdemo.v1.ArtistService"
)

// ArtistServiceClient is a client for the grpcdemo.v1.ArtistService service.
type ArtistServiceClient interface {
	// Create a new Artist
	CreateArtist(context.Context, *connect_go.Request[v1.CreateArtistRequest]) (*connect_go.Response[v1.CreateArtistResponse], error)
	// Batch gets multiple artists.
	GetArtists(context.Context, *connect_go.Request[v1.GetArtistsRequest]) (*connect_go.Response[v1.GetArtistsResponse], error)
	// Updates specific fields of an Artist
	UpdateArtist(context.Context, *connect_go.Request[v1.UpdateArtistRequest]) (*connect_go.Response[v1.UpdateArtistResponse], error)
	// Deletes an artist from our system.
	DeleteArtist(context.Context, *connect_go.Request[v1.DeleteArtistRequest]) (*connect_go.Response[v1.DeleteArtistResponse], error)
	// Finds and retrieves artists matching the particular criteria.
	ListArtists(context.Context, *connect_go.Request[v1.ListArtistsRequest]) (*connect_go.Response[v1.ListArtistsResponse], error)
}

// NewArtistServiceClient constructs a client for the grpcdemo.v1.ArtistService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArtistServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ArtistServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &artistServiceClient{
		createArtist: connect_go.NewClient[v1.CreateArtistRequest, v1.CreateArtistResponse](
			httpClient,
			baseURL+"/grpcdemo.v1.ArtistService/CreateArtist",
			opts...,
		),
		getArtists: connect_go.NewClient[v1.GetArtistsRequest, v1.GetArtistsResponse](
			httpClient,
			baseURL+"/grpcdemo.v1.ArtistService/GetArtists",
			opts...,
		),
		updateArtist: connect_go.NewClient[v1.UpdateArtistRequest, v1.UpdateArtistResponse](
			httpClient,
			baseURL+"/grpcdemo.v1.ArtistService/UpdateArtist",
			opts...,
		),
		deleteArtist: connect_go.NewClient[v1.DeleteArtistRequest, v1.DeleteArtistResponse](
			httpClient,
			baseURL+"/grpcdemo.v1.ArtistService/DeleteArtist",
			opts...,
		),
		listArtists: connect_go.NewClient[v1.ListArtistsRequest, v1.ListArtistsResponse](
			httpClient,
			baseURL+"/grpcdemo.v1.ArtistService/ListArtists",
			opts...,
		),
	}
}

// artistServiceClient implements ArtistServiceClient.
type artistServiceClient struct {
	createArtist *connect_go.Client[v1.CreateArtistRequest, v1.CreateArtistResponse]
	getArtists   *connect_go.Client[v1.GetArtistsRequest, v1.GetArtistsResponse]
	updateArtist *connect_go.Client[v1.UpdateArtistRequest, v1.UpdateArtistResponse]
	deleteArtist *connect_go.Client[v1.DeleteArtistRequest, v1.DeleteArtistResponse]
	listArtists  *connect_go.Client[v1.ListArtistsRequest, v1.ListArtistsResponse]
}

// CreateArtist calls grpcdemo.v1.ArtistService.CreateArtist.
func (c *artistServiceClient) CreateArtist(ctx context.Context, req *connect_go.Request[v1.CreateArtistRequest]) (*connect_go.Response[v1.CreateArtistResponse], error) {
	return c.createArtist.CallUnary(ctx, req)
}

// GetArtists calls grpcdemo.v1.ArtistService.GetArtists.
func (c *artistServiceClient) GetArtists(ctx context.Context, req *connect_go.Request[v1.GetArtistsRequest]) (*connect_go.Response[v1.GetArtistsResponse], error) {
	return c.getArtists.CallUnary(ctx, req)
}

// UpdateArtist calls grpcdemo.v1.ArtistService.UpdateArtist.
func (c *artistServiceClient) UpdateArtist(ctx context.Context, req *connect_go.Request[v1.UpdateArtistRequest]) (*connect_go.Response[v1.UpdateArtistResponse], error) {
	return c.updateArtist.CallUnary(ctx, req)
}

// DeleteArtist calls grpcdemo.v1.ArtistService.DeleteArtist.
func (c *artistServiceClient) DeleteArtist(ctx context.Context, req *connect_go.Request[v1.DeleteArtistRequest]) (*connect_go.Response[v1.DeleteArtistResponse], error) {
	return c.deleteArtist.CallUnary(ctx, req)
}

// ListArtists calls grpcdemo.v1.ArtistService.ListArtists.
func (c *artistServiceClient) ListArtists(ctx context.Context, req *connect_go.Request[v1.ListArtistsRequest]) (*connect_go.Response[v1.ListArtistsResponse], error) {
	return c.listArtists.CallUnary(ctx, req)
}

// ArtistServiceHandler is an implementation of the grpcdemo.v1.ArtistService service.
type ArtistServiceHandler interface {
	// Create a new Artist
	CreateArtist(context.Context, *connect_go.Request[v1.CreateArtistRequest]) (*connect_go.Response[v1.CreateArtistResponse], error)
	// Batch gets multiple artists.
	GetArtists(context.Context, *connect_go.Request[v1.GetArtistsRequest]) (*connect_go.Response[v1.GetArtistsResponse], error)
	// Updates specific fields of an Artist
	UpdateArtist(context.Context, *connect_go.Request[v1.UpdateArtistRequest]) (*connect_go.Response[v1.UpdateArtistResponse], error)
	// Deletes an artist from our system.
	DeleteArtist(context.Context, *connect_go.Request[v1.DeleteArtistRequest]) (*connect_go.Response[v1.DeleteArtistResponse], error)
	// Finds and retrieves artists matching the particular criteria.
	ListArtists(context.Context, *connect_go.Request[v1.ListArtistsRequest]) (*connect_go.Response[v1.ListArtistsResponse], error)
}

// NewArtistServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArtistServiceHandler(svc ArtistServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/grpcdemo.v1.ArtistService/CreateArtist", connect_go.NewUnaryHandler(
		"/grpcdemo.v1.ArtistService/CreateArtist",
		svc.CreateArtist,
		opts...,
	))
	mux.Handle("/grpcdemo.v1.ArtistService/GetArtists", connect_go.NewUnaryHandler(
		"/grpcdemo.v1.ArtistService/GetArtists",
		svc.GetArtists,
		opts...,
	))
	mux.Handle("/grpcdemo.v1.ArtistService/UpdateArtist", connect_go.NewUnaryHandler(
		"/grpcdemo.v1.ArtistService/UpdateArtist",
		svc.UpdateArtist,
		opts...,
	))
	mux.Handle("/grpcdemo.v1.ArtistService/DeleteArtist", connect_go.NewUnaryHandler(
		"/grpcdemo.v1.ArtistService/DeleteArtist",
		svc.DeleteArtist,
		opts...,
	))
	mux.Handle("/grpcdemo.v1.ArtistService/ListArtists", connect_go.NewUnaryHandler(
		"/grpcdemo.v1.ArtistService/ListArtists",
		svc.ListArtists,
		opts...,
	))
	return "/grpcdemo.v1.ArtistService/", mux
}

// UnimplementedArtistServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedArtistServiceHandler struct{}

func (UnimplementedArtistServiceHandler) CreateArtist(context.Context, *connect_go.Request[v1.CreateArtistRequest]) (*connect_go.Response[v1.CreateArtistResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpcdemo.v1.ArtistService.CreateArtist is not implemented"))
}

func (UnimplementedArtistServiceHandler) GetArtists(context.Context, *connect_go.Request[v1.GetArtistsRequest]) (*connect_go.Response[v1.GetArtistsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpcdemo.v1.ArtistService.GetArtists is not implemented"))
}

func (UnimplementedArtistServiceHandler) UpdateArtist(context.Context, *connect_go.Request[v1.UpdateArtistRequest]) (*connect_go.Response[v1.UpdateArtistResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpcdemo.v1.ArtistService.UpdateArtist is not implemented"))
}

func (UnimplementedArtistServiceHandler) DeleteArtist(context.Context, *connect_go.Request[v1.DeleteArtistRequest]) (*connect_go.Response[v1.DeleteArtistResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpcdemo.v1.ArtistService.DeleteArtist is not implemented"))
}

func (UnimplementedArtistServiceHandler) ListArtists(context.Context, *connect_go.Request[v1.ListArtistsRequest]) (*connect_go.Response[v1.ListArtistsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpcdemo.v1.ArtistService.ListArtists is not implemented"))
}
