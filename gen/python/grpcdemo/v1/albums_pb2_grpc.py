# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from grpcdemo.v1 import albums_pb2 as grpcdemo_dot_v1_dot_albums__pb2


class AlbumServiceStub(object):
    """
    Our Demo service.  This spec declares the interface for a simple music album
    service with Albums, Albums, Events and a messaging space for fans to converse
    in realtime.


    The main Album server, serving as an entry into managing album lifecycles
    and retrieving them
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAlbum = channel.unary_unary(
                '/grpcdemo.v1.AlbumService/CreateAlbum',
                request_serializer=grpcdemo_dot_v1_dot_albums__pb2.CreateAlbumRequest.SerializeToString,
                response_deserializer=grpcdemo_dot_v1_dot_albums__pb2.CreateAlbumResponse.FromString,
                )
        self.GetAlbum = channel.unary_unary(
                '/grpcdemo.v1.AlbumService/GetAlbum',
                request_serializer=grpcdemo_dot_v1_dot_albums__pb2.GetAlbumRequest.SerializeToString,
                response_deserializer=grpcdemo_dot_v1_dot_albums__pb2.GetAlbumResponse.FromString,
                )
        self.GetAlbums = channel.unary_unary(
                '/grpcdemo.v1.AlbumService/GetAlbums',
                request_serializer=grpcdemo_dot_v1_dot_albums__pb2.GetAlbumsRequest.SerializeToString,
                response_deserializer=grpcdemo_dot_v1_dot_albums__pb2.GetAlbumsResponse.FromString,
                )
        self.UpdateAlbum = channel.unary_unary(
                '/grpcdemo.v1.AlbumService/UpdateAlbum',
                request_serializer=grpcdemo_dot_v1_dot_albums__pb2.UpdateAlbumRequest.SerializeToString,
                response_deserializer=grpcdemo_dot_v1_dot_albums__pb2.UpdateAlbumResponse.FromString,
                )
        self.DeleteAlbum = channel.unary_unary(
                '/grpcdemo.v1.AlbumService/DeleteAlbum',
                request_serializer=grpcdemo_dot_v1_dot_albums__pb2.DeleteAlbumRequest.SerializeToString,
                response_deserializer=grpcdemo_dot_v1_dot_albums__pb2.DeleteAlbumResponse.FromString,
                )
        self.ListAlbums = channel.unary_unary(
                '/grpcdemo.v1.AlbumService/ListAlbums',
                request_serializer=grpcdemo_dot_v1_dot_albums__pb2.ListAlbumsRequest.SerializeToString,
                response_deserializer=grpcdemo_dot_v1_dot_albums__pb2.ListAlbumsResponse.FromString,
                )


class AlbumServiceServicer(object):
    """
    Our Demo service.  This spec declares the interface for a simple music album
    service with Albums, Albums, Events and a messaging space for fans to converse
    in realtime.


    The main Album server, serving as an entry into managing album lifecycles
    and retrieving them
    """

    def CreateAlbum(self, request, context):
        """
        Create a new Album
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAlbum(self, request, context):
        """
        Gets a single album
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAlbums(self, request, context):
        """
        Batch gets multiple albums
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAlbum(self, request, context):
        """
        Updates specific fields of an Album
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAlbum(self, request, context):
        """
        Deletes an album from our system.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAlbums(self, request, context):
        """
        Finds and retrieves albums matching the particular criteria.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AlbumServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAlbum': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAlbum,
                    request_deserializer=grpcdemo_dot_v1_dot_albums__pb2.CreateAlbumRequest.FromString,
                    response_serializer=grpcdemo_dot_v1_dot_albums__pb2.CreateAlbumResponse.SerializeToString,
            ),
            'GetAlbum': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAlbum,
                    request_deserializer=grpcdemo_dot_v1_dot_albums__pb2.GetAlbumRequest.FromString,
                    response_serializer=grpcdemo_dot_v1_dot_albums__pb2.GetAlbumResponse.SerializeToString,
            ),
            'GetAlbums': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAlbums,
                    request_deserializer=grpcdemo_dot_v1_dot_albums__pb2.GetAlbumsRequest.FromString,
                    response_serializer=grpcdemo_dot_v1_dot_albums__pb2.GetAlbumsResponse.SerializeToString,
            ),
            'UpdateAlbum': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAlbum,
                    request_deserializer=grpcdemo_dot_v1_dot_albums__pb2.UpdateAlbumRequest.FromString,
                    response_serializer=grpcdemo_dot_v1_dot_albums__pb2.UpdateAlbumResponse.SerializeToString,
            ),
            'DeleteAlbum': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAlbum,
                    request_deserializer=grpcdemo_dot_v1_dot_albums__pb2.DeleteAlbumRequest.FromString,
                    response_serializer=grpcdemo_dot_v1_dot_albums__pb2.DeleteAlbumResponse.SerializeToString,
            ),
            'ListAlbums': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAlbums,
                    request_deserializer=grpcdemo_dot_v1_dot_albums__pb2.ListAlbumsRequest.FromString,
                    response_serializer=grpcdemo_dot_v1_dot_albums__pb2.ListAlbumsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpcdemo.v1.AlbumService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AlbumService(object):
    """
    Our Demo service.  This spec declares the interface for a simple music album
    service with Albums, Albums, Events and a messaging space for fans to converse
    in realtime.


    The main Album server, serving as an entry into managing album lifecycles
    and retrieving them
    """

    @staticmethod
    def CreateAlbum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcdemo.v1.AlbumService/CreateAlbum',
            grpcdemo_dot_v1_dot_albums__pb2.CreateAlbumRequest.SerializeToString,
            grpcdemo_dot_v1_dot_albums__pb2.CreateAlbumResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAlbum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcdemo.v1.AlbumService/GetAlbum',
            grpcdemo_dot_v1_dot_albums__pb2.GetAlbumRequest.SerializeToString,
            grpcdemo_dot_v1_dot_albums__pb2.GetAlbumResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAlbums(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcdemo.v1.AlbumService/GetAlbums',
            grpcdemo_dot_v1_dot_albums__pb2.GetAlbumsRequest.SerializeToString,
            grpcdemo_dot_v1_dot_albums__pb2.GetAlbumsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateAlbum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcdemo.v1.AlbumService/UpdateAlbum',
            grpcdemo_dot_v1_dot_albums__pb2.UpdateAlbumRequest.SerializeToString,
            grpcdemo_dot_v1_dot_albums__pb2.UpdateAlbumResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAlbum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcdemo.v1.AlbumService/DeleteAlbum',
            grpcdemo_dot_v1_dot_albums__pb2.DeleteAlbumRequest.SerializeToString,
            grpcdemo_dot_v1_dot_albums__pb2.DeleteAlbumResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAlbums(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcdemo.v1.AlbumService/ListAlbums',
            grpcdemo_dot_v1_dot_albums__pb2.ListAlbumsRequest.SerializeToString,
            grpcdemo_dot_v1_dot_albums__pb2.ListAlbumsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
